#!/usr/bin/env python
# Reference:
# https://github.com/aws/sagemaker-containers
# https://github.com/awslabs/amazon-sagemaker-examples/blob/master/advanced_functionality/xgboost_bring_your_own_model/xgboost_bring_your_own_model.ipynb
# https://github.com/awslabs/amazon-sagemaker-examples/blob/master/advanced_functionality/scikit_bring_your_own/scikit_bring_your_own.ipynb
from __future__ import print_function

import os
from pydash import snake_case
from datetime import datetime
import xgboost as xgb
import pandas as pd
import json
import boto3
import traceback
import sys
from sklearn.metrics import roc_curve, auc, confusion_matrix

from sklearn.externals import joblib

s3 = boto3.resource(service_name='s3')
prefix = '/opt/ml/'


def train():
    print('Starting the training.')
    print(os.environ)
    try:
        with open('/opt/ml/input/config/hyperparameters.json') as hyper_file:
            hyper_params = json.load(hyper_file)
            print(hyper_params)

        with open('/opt/ml/input/config/inputdataconfig.json') as config_file:
            input_config = json.load(config_file)
            print(input_config)

        manifest = open('/opt/ml/input/data/train-manifest')
        print(manifest.readlines())

        print(os.listdir('/opt/ml'))
        print(os.listdir('/opt/ml/input/data/train'))

        X_train = pd.read_csv(os.path.join(prefix, 'input/data/train/X_train.csv'))
        y_train = pd.read_csv(os.path.join(prefix, 'input/data/train/y_train.csv'))['y']

        X_test = pd.read_csv(os.path.join(prefix, 'input/data/test/X_test.csv'))
        y_test = pd.read_csv(os.path.join(prefix, 'input/data/test/y_test.csv'))['y']

        # train
        classifier = xgb.sklearn.XGBClassifier(
            nthread=int(hyper_params.get('nthread')),
            seed=int(hyper_params.get('seed')),
            max_depth=int(hyper_params.get('max_depth')),
            gamma=int(hyper_params.get('gamma')),
            min_child_weight=int(hyper_params.get('min_child_weight')),
            learning_rate=float(hyper_params.get('learning_rate')),
            subsample=float(hyper_params.get('subsample')),
            colsample_bytree=float(hyper_params.get('colsample_bytree'))
        )
        classifier.fit(X_train, y_train, eval_metric=['auc'])

        # validate (sensitivity)
        probs = classifier.predict_proba(X_test)
        probs = [item[1] for item in probs]

        probs_xgb = probs.copy()
        sorted_probs_xgb = probs.copy()
        sorted_probs_xgb.sort()

        top_n_test = int(y_test.shape[0] * 0.08)
        print('top_n_test: {}'.format(top_n_test))
        top_probs_xgb = sorted_probs_xgb[-(top_n_test+1):]
        threshold = min(top_probs_xgb)
        print('threshold: {}'.format(threshold))

        y_pred = [(prob > threshold) for prob in probs_xgb]

        cm = confusion_matrix(y_test, y_pred)
        TP = cm[1][1]
        FP = cm[0][1]
        TN = cm[0][0]
        FN = cm[1][0]

        #specificity = TP / (TP + FP)
        sensitivity = TP / (TP + FN)
        #accuracy = (TP + TN) / (TP + TN + FP + FN)

        print('sensitivity={}'.format(sensitivity))
        print('sensitivity={}'.format(sensitivity), file=open('/opt/ml/output/result', 'w'))

        fpr, tpr, thresh = roc_curve(y_test, probs_xgb)
        roc_auc = auc(fpr, tpr)
        print('validation-auc={}'.format(roc_auc))
        print('validation-auc={}'.format(roc_auc), file=open('/opt/ml/output/result', 'w'))

        model_file = '/opt/ml/model/xgb_{}.pkl'.format(snake_case(datetime.now()))
        joblib.dump(classifier, model_file)

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)

        # Print to file for reporting in SageMaker console
        print('Exception during training: ' + str(e) + '\n' + trc, file=open('/opt/ml/output/error', 'w'))

        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    # train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
